// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/login": {
            "post": {
                "description": "Login to api.wordbubble.io using the user credentials",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Login to api.wordbubble.io",
                "parameters": [
                    {
                        "description": "Credentials used to authenticate a user",
                        "name": "AuthenticatedUser",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.LoginUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Valid access and refresh tokens for user",
                        "schema": {
                            "$ref": "#/definitions/resp.AuthenticatedResponse"
                        }
                    },
                    "400": {
                        "description": "resp.ErrParseUser, resp.ErrUnknownUser, resp.ErrCouldNotDetermineUserType",
                        "schema": {
                            "$ref": "#/definitions/resp.StatusBadRequest"
                        }
                    },
                    "401": {
                        "description": "resp.ErrInvalidCredentials",
                        "schema": {
                            "$ref": "#/definitions/resp.StatusUnauthorized"
                        }
                    },
                    "405": {
                        "description": "resp.ErrInvalidHttpMethod",
                        "schema": {
                            "$ref": "#/definitions/resp.StatusMethodNotAllowed"
                        }
                    },
                    "500": {
                        "description": "resp.ErrSQLMappingError, resp.ErrCouldNotStoreRefreshToken",
                        "schema": {
                            "$ref": "#/definitions/resp.StatusInternalServerError"
                        }
                    }
                }
            }
        },
        "/pop": {
            "delete": {
                "description": "Pop removes and returns a wordbubble for a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wordbubble"
                ],
                "summary": "Pop a wordbubble",
                "parameters": [
                    {
                        "description": "Username or email that the wordbubble will come from",
                        "name": "UnauthenticatedUser",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.PopUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Latest WordBubble for user passed",
                        "schema": {
                            "$ref": "#/definitions/model.WordBubble"
                        }
                    },
                    "201": {
                        "description": "resp.ErrNoWordBubble",
                        "schema": {
                            "$ref": "#/definitions/resp.StatusNoContent"
                        }
                    },
                    "400": {
                        "description": "resp.ErrParseUser, resp.ErrUnknownUser, resp.ErrCouldNotDetermineUserType",
                        "schema": {
                            "$ref": "#/definitions/resp.StatusBadRequest"
                        }
                    },
                    "401": {
                        "description": "resp.ErrInvalidCredentials",
                        "schema": {
                            "$ref": "#/definitions/resp.StatusUnauthorized"
                        }
                    },
                    "405": {
                        "description": "resp.ErrInvalidHttpMethod",
                        "schema": {
                            "$ref": "#/definitions/resp.StatusMethodNotAllowed"
                        }
                    },
                    "500": {
                        "description": "resp.ErrSQLMappingError, resp.ErrCouldNotStoreRefreshToken",
                        "schema": {
                            "$ref": "#/definitions/resp.StatusInternalServerError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.LoginUser": {
            "description": "LoginUser is the body sent to the /login operation",
            "type": "object",
            "properties": {
                "password": {
                    "type": "string",
                    "example": "SomePassword_123"
                },
                "user": {
                    "type": "string",
                    "example": "ben"
                }
            }
        },
        "model.PopUser": {
            "description": "PopUser is the param sent to the /pop operation",
            "type": "object",
            "properties": {
                "user": {
                    "type": "string",
                    "example": "ben"
                }
            }
        },
        "model.WordBubble": {
            "type": "object",
            "properties": {
                "text": {
                    "type": "string",
                    "example": "Hello world, this is just an example of a wordbubble"
                }
            }
        },
        "resp.AuthenticatedResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "xxx.yyy.zzz"
                },
                "refresh_token": {
                    "type": "string",
                    "example": "xxx.yyy.zzz"
                }
            }
        },
        "resp.StatusBadRequest": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "message": {
                    "type": "string",
                    "example": "could not determine if user passed is a username or an email"
                }
            }
        },
        "resp.StatusInternalServerError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 500
                },
                "message": {
                    "type": "string",
                    "example": "an error occurred mapping data from the database"
                }
            }
        },
        "resp.StatusMethodNotAllowed": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 405
                },
                "message": {
                    "type": "string",
                    "example": "invalid http method"
                }
            }
        },
        "resp.StatusNoContent": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 201
                },
                "message": {
                    "type": "string",
                    "example": "could not find a wordbubble for this user"
                }
            }
        },
        "resp.StatusUnauthorized": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 401
                },
                "message": {
                    "type": "string",
                    "example": "could not validate the refresh token, please login again"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Swagger Example API",
	Description:      "This is a sample server celler server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
